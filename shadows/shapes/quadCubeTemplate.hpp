#ifndef QUADCUBETEMPLATE_HPP
#define QUADCUBETEMPLATE_HPP

#include <glfw3.h>
#include <glad/glad.h>

class quadCubeTemplate{
public:
    GLfloat g_vertex_buffer_data[72] = {
		1.000000, 1.000000, -1.000000,
		1.000000, -1.000000, -1.000000,
		1.000000, 1.000000, 1.000000,
		1.000000, -1.000000, 1.000000,
		
		-1.000000, 1.000000, -1.000000,
		-1.000000, -1.000000, -1.000000,
		-1.000000, 1.000000, 1.000000,
		-1.000000, -1.000000, 1.000000,

		1.000000, 1.000000, -1.000000,
		1.000000, -1.000000, -1.000000,
		-1.000000, 1.000000, -1.000000,
		-1.000000, -1.000000, -1.000000,

		1.000000, 1.000000, 1.000000,
		1.000000, -1.000000, 1.000000,
		-1.000000, 1.000000, 1.000000,
		-1.000000, -1.000000, 1.000000,

		1.000000, 1.000000, -1.000000,
		1.000000, 1.000000, 1.000000,
		-1.000000, 1.000000, -1.000000,
		-1.000000, 1.000000, 1.000000,

		1.000000, -1.000000, -1.000000,
		1.000000, -1.000000, 1.000000,
		-1.000000, -1.000000, -1.000000,
		-1.000000, -1.000000, 1.000000,
	};
    GLfloat g_uv_buffer_data[28] = { 
		0.625000, 0.500000,
		0.375000, 0.500000,
		0.625000, 0.750000,
		0.375000, 0.750000,
		0.875000, 0.500000,
		0.625000, 0.250000,
		0.125000, 0.500000,
		0.375000, 0.250000,
		0.875000, 0.750000,
		0.625000, 1.000000,
		0.625000, 0.000000,
		0.375000, 0.000000,
		0.375000, 1.000000,
		0.125000, 0.750000,
	};
    
    GLuint vertexbuffer;
    GLuint uvbuffer;
    GLuint programID;
    GLuint texture;

    quadCubeTemplate(GLuint);
	quadCubeTemplate(){};

    void loadTexture(GLuint);
    void prep();
    
    void move(float,float,float);
    void scale(float,float,float);

    void draw(GLuint);
    void draw(GLuint, GLuint);
    void read();
	void cleanup();
};

#endif